<?php
namespace app\components;

use yii;
use yii\base\Component;
use app\models\Users;
use app\models\AccessGroup;
use yii\helpers\Url;
use hoomanMirghasemi\jdf\Jdf;

class User extends Component
{
    public $UserID;
    public $Model;
    public $profile;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }
    public function name(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->fullName;
            } else {
                return null;
            }
        }
    }
    public function status(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->status;
            } else {
                return null;
            }
        }
    }
    public function mobile(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->mobile;
            } else {
                return null;
            }
        }
    }

    public function tell(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->tell;
            } else {
                return null;
            }
        }
    }
    public function img(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->img;
            } else {
                return null;
            }
        }
    }
    public function email(){
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->email;
            } else {
                return null;
            }
        }
    }
    public function GetRole()
    {
        $this->Set_User();
        if ($this->UserID != null) {
            $this->Model = Users::find()->where(['id'=>$this->UserID])->one();
            if ($this->Model != null) {
                return $this->Model->role;
            } else {
                return null;
            }
        }
    }
    private function Set_User()
    {
        if (\Yii::$app->session['user_id']):
            $this->UserID = \Yii::$app->session['user_id'];
        else:
            $this->UserID = null;
        endif;
    }
    public function ChangePass($id,$new_pass){
      $model = Users::find()->where(['id'=>$id])->one();
      $model->password = \Yii::$app->getSecurity()->generatePasswordHash($new_pass);
      if($model->save())
      return true;
      return false;
    }
    public function Login($email, $password, $service=null)
    {
        $user = $email;
        $pass = $password;
        $check = Users::find()->where(['email'=>$user])->OrWhere(['mobile'=>$user])->andWhere(['active'=>1])->one();
       

        if ($check != null):
            if ( (\Yii::$app->getSecurity()->validatePassword($pass, $check->password)) ):
                //Redirect to admin and set session
                \Yii::$app->session['login'] = true;
                \Yii::$app->session['user_id'] = $check->id;
                \Yii::$app->session['user_name'] = $check->fullName;
                return true;
            endif;
        else:
            if (empty($check)):
                \Yii::$app->session->setFlash('error-login', 'نام کاربری یا رمزعبور اشتباه است');
            else:
                 \Yii::$app->session->setFlash('error-login', ' کاربری شما غیر فعال شده است لطفا با پشتیبان تماس بگیرید.');               
            endif;
            return null;
        endif;
    }


    public function is_loged()
    {
        if (\Yii::$app->session['login']):
            return true; else:
            return false;
        endif;
    }
    public function Logout()
    {
        if (\Yii::$app->session['login']):
            unset(\Yii::$app->session['login']);
            unset(\Yii::$app->session['user_id']);
            unset(\Yii::$app->session['cart_id']);
            unset(\Yii::$app->session['guest_id']);
        
            
        endif;
    }


    /**
     * @inheritdoc
     */

    public static function findIdentity($id)
    {
        if (Yii::$app->getSession()->has('user-'.$id)) {
            return new self(Yii::$app->getSession()->get('user-'.$id));
        } else {
            return isset(self::$users[$id]) ? new self(self::$users[$id]) : null;
        }
    }

    /**
     * @param \nodge\eauth\ServiceBase $service
     * @return User
     * @throws ErrorException
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        foreach (self::$users as $user) {
            if ($user['accessToken'] === $token) {
                return new static($user);
            }
        }

        return null;
    }
    public static function findByUsername($username)
    {
        foreach (self::$users as $user) {
            if (strcasecmp($user['username'], $username) === 0) {
                return new static($user);
            }
        }

        return null;
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->authKey;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->authKey === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password === $password;
    }
    public static function findByEAuth($service)
    {
        if (!$service->getIsAuthenticated()) {
            throw new ErrorException('EAuth user should be authenticated before creating identity.');
        }

        $id = $service->getServiceName().'-'.$service->getId();
        $attributes = [
            'id' => $id,
            'username' => $service->getAttribute('name'),
            'authKey' => md5($id),
            'profile' => $service->getAttributes(),
        ];
        $attributes['profile']['service'] = $service->getServiceName();
        Yii::$app->getSession()->set('user-'.$id, $attributes);
        return $attributes;
    }
}
